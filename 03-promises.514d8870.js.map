{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,oBAajC,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEL,WAAUJ,UAEpBU,EAAO,CAAEN,WAAUJ,S,GAEpBA,E,IApBPJ,EAAKC,KAAKe,iBAAiB,UAE3B,SAAkBC,GAChBA,EAAIC,iBAqBN,SAAoBd,EAAOC,EAAMC,GAC/B,IAAK,IAAIa,EAAI,EAAGA,GAAKb,EAAQa,GAAK,EAEhCZ,EAAcY,EADdf,GAAe,IAANe,EAAU,EAAId,GAEpBe,MAAK,SAAAC,G,IAAGb,EAAQa,EAARb,SAAUc,EAAKD,EAALjB,MACjBN,EAAAyB,OAAOC,QAAQ,qBAAoCC,OAAfjB,EAAS,QAAYiB,OAANH,EAAM,MAAK,CAC5DI,QAAS,K,IAGZC,OAAM,SAAAN,G,IAAGb,EAAQa,EAARb,SAAUc,EAAKD,EAALjB,MAClBN,EAAAyB,OAAOK,QAAQ,oBAAmCH,OAAfjB,EAAS,QAAYiB,OAANH,EAAM,MAAK,CAC3DI,QAAS,K,IAGZG,SAAQ,W,OAAM7B,EAAKC,KAAK6B,O,IAlC7BC,CACEC,OAAOhC,EAAKI,MAAM6B,OAClBD,OAAOhC,EAAKK,KAAK4B,OACjBD,OAAOhC,EAAKM,OAAO2B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\nrefs.form.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  getNumbers(\n    Number(refs.delay.value),\n    Number(refs.step.value),\n    Number(refs.amount.value)\n  );\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction getNumbers(delay, step, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    delay += i === 1 ? 0 : step;\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: 2000,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`, {\n          timeout: 2000,\n        });\n      })\n      .finally(() => refs.form.reset());\n  }\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","i","then","param","_$delay","Notify","success","concat","timeout","catch","failure","finally","reset","$ce04d3a99e08e73b$var$getNumbers","Number","value"],"version":3,"file":"03-promises.514d8870.js.map"}